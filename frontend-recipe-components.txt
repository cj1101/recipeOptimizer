// src/components/recipes/RecipeCard.tsx
import React, { useState } from 'react';
import { Recipe } from '../../types/recipe.types';
import Card, { CardHeader, CardBody, CardFooter } from '../ui/Card';
import Button from '../ui/Button';
import Rating from '../ui/Rating';
import { useRecipes } from '../../hooks/useRecipes';
import RecipeDetailModal from './RecipeDetailModal';

interface RecipeCardProps {
  recipe: Recipe;
}

const RecipeCard: React.FC<RecipeCardProps> = ({ recipe }) => {
  const [showDetailModal, setShowDetailModal] = useState(false);
  const { rateRecipe } = useRecipes();

  const handleRatingChange = async (newRating: number) => {
    try {
      await rateRecipe(recipe.id, newRating);
    } catch (error) {
      console.error('Failed to update rating:', error);
    }
  };

  return (
    <>
      <Card className="hover:shadow-lg transition-shadow duration-300">
        <CardHeader className={`flex justify-between items-center ${
          recipe.isAiGenerated 
            ? 'bg-gradient-to-r from-accent to-accent-dark text-white' 
            : 'bg-gradient-to-r from-gray-100 to-gray-200 text-gray-800'
        }`}>
          <div className="flex items-center">
            {recipe.isAiGenerated && (
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-white text-accent mr-2">
                AI Generated
              </span>
            )}
            <h3 className="text-lg font-bold truncate">
              Recipe #{recipe.id}
            </h3>
          </div>
          <span className="text-sm">
            {new Date(recipe.createdAt).toLocaleDateString()}
          </span>
        </CardHeader>
        
        <CardBody>
          <div className="mb-3">
            <div className="text-sm font-medium text-gray-700 mb-1">Rating</div>
            <Rating 
              value={recipe.rating} 
              onChange={handleRatingChange} 
              max={10} 
              size="md"
            />
          </div>
          
          <div className="mb-3">
            <div className="text-sm font-medium text-gray-700 mb-1">Ingredients</div>
            <ul className="max-h-40 overflow-y-auto text-sm text-gray-600">
              {recipe.ingredients.slice(0, 5).map((ingredient, index) => (
                <li key={index} className="mb-1">
                  â€¢ {ingredient.quantity} {ingredient.unit} {ingredient.ingredientName}
                </li>
              ))}
              {recipe.ingredients.length > 5 && (
                <li className="text-gray-500 italic">
                  + {recipe.ingredients.length - 5} more...
                </li>
              )}
            </ul>
          </div>
          
          {recipe.notes && (
            <div>
              <div className="text-sm font-medium text-gray-700 mb-1">Notes</div>
              <p className="text-sm text-gray-600 line-clamp-2">{recipe.notes}</p>
            </div>
          )}
        </CardBody>
        
        <CardFooter className="flex justify-end">
          <Button variant="secondary" size="sm" onClick={() => setShowDetailModal(true)}>
            View Details
          </Button>
        </CardFooter>
      </Card>

      <RecipeDetailModal
        isOpen={showDetailModal}
        onClose={() => setShowDetailModal(false)}
        recipe={recipe}
      />
    </>
  );
};

export default RecipeCard;

// src/components/recipes/RecipeDetailModal.tsx
import React, { useState } from 'react';
import { Recipe } from '../../types/recipe.types';
import Modal from '../ui/Modal';
import Button from '../ui/Button';
import Rating from '../ui/Rating';
import { useRecipes } from '../../hooks/useRecipes';
import EditRecipeModal from './EditRecipeModal';

interface RecipeDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  recipe: Recipe;
}

const RecipeDetailModal: React.FC<RecipeDetailModalProps> = ({
  isOpen,
  onClose,
  recipe,
}) => {
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [scaleFactor, setScaleFactor] = useState(1);
  const { rateRecipe, deleteRecipe } = useRecipes();

  const handleRatingChange = async (newRating: number) => {
    try {
      await rateRecipe(recipe.id, newRating);
    } catch (error) {
      console.error('Failed to update rating:', error);
    }
  };

  const handleDelete = async () => {
    try {
      await deleteRecipe(recipe.id);
      onClose();
    } catch (error) {
      console.error('Failed to delete recipe:', error);
    }
  };

  const getScaledQuantity = (quantity: number) => {
    return (quantity * scaleFactor).toFixed(1).replace(/\.0$/, '');
  };

  return (
    <>
      <Modal
        isOpen={isOpen}
        onClose={onClose}
        title={`Recipe ${recipe.isAiGenerated ? '(AI Generated)' : `#${recipe.id}`}`}
        size="lg"
      >
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <div>
              <h3 className="text-lg font-medium text-gray-900">Rating</h3>
              <Rating
                value={recipe.rating}
                onChange={handleRatingChange}
                max={10}
                size="lg"
              />
            </div>
            <div className="text-right">
              <p className="text-sm text-gray-500">Created: {new Date(recipe.createdAt).toLocaleString()}</p>
              {recipe.updatedAt && recipe.updatedAt !== recipe.createdAt && (
                <p className="text-sm text-gray-500">Updated: {new Date(recipe.updatedAt).toLocaleString()}</p>
              )}
            </div>
          </div>

          <div className="border-t border-gray-200 pt-4">
            <div className="flex justify-between items-center mb-3">
              <h3 className="text-lg font-medium text-gray-900">Ingredients</h3>
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600">Scale:</span>
                <input
                  type="range"
                  min="0.25"
                  max="3"
                  step="0.25"
                  value={scaleFactor}
                  onChange={(e) => setScaleFactor(parseFloat(e.target.value))}
                  className="w-32"
                />
                <span className="text-sm font-medium text-gray-700">
                  {scaleFactor}x
                </span>
              </div>
            </div>
            <ul className="space-y-2">
              {recipe.ingredients.map((ingredient, index) => (
                <li key={index} className="flex items-center text-gray-700">
                  <span className="font-medium mr-2">{getScaledQuantity(ingredient.quantity)}</span>
                  <span className="text-gray-600 mr-2">{ingredient.unit}</span>
                  <span>{ingredient.ingredientName}</span>
                </li>
              ))}
            </ul>
          </div>

          {recipe.notes && (
            <div className="border-t border-gray-200 pt-4">
              <h3 className="text-lg font-medium text-gray-900 mb-2">Notes</h3>
              <p className="text-gray-700 whitespace-pre-line">{recipe.notes}</p>
            </div>
          )}

          <div className="flex justify-between pt-4 border-t border-gray-200">
            <div>
              {showDeleteConfirm ? (
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-red-600">Confirm delete?</span>
                  <Button variant="danger" size="sm" onClick={handleDelete}>
                    Yes, Delete
                  </Button>
                  <Button
                    variant="secondary"
                    size="sm"
                    onClick={() => setShowDeleteConfirm(false)}
                  >
                    Cancel
                  </Button>
                </div>
              ) : (
                <Button
                  variant="danger"
                  size="sm"
                  onClick={() => setShowDeleteConfirm(true)}
                >
                  Delete Recipe
                </Button>
              )}
            </div>
            <div className="flex space-x-2">
              <Button variant="secondary" size="sm" onClick={onClose}>
                Close
              </Button>
              <Button
                variant="primary"
                size="sm"
                onClick={() => {
                  setShowEditModal(true);
                  onClose();
                }}
              >
                Edit Recipe
              </Button>
            </div>
          </div>
        </div>
      </Modal>

      <EditRecipeModal
        isOpen={showEditModal}
        onClose={() => setShowEditModal(false)}
        recipe={recipe}
      />
    </>
  );
};

export default RecipeDetailModal;

// src/components/recipes/CreateRecipeModal.tsx
import React, { useState, useEffect } from 'react';
import { useRecipes } from '../../hooks/useRecipes';
import { useForm } from '../../hooks/useForm';
import { MeasurementUnit, RecipeFormData, RecipeIngredient } from '../../types/recipe.types';
import Modal from '../ui/Modal';
import Button from '../ui/Button';
import Input from '../ui/Input';
import Rating from '../ui/Rating';
import IngredientSelector from '../ingredients/IngredientSelector';

interface CreateRecipeModalProps {
  isOpen: boolean;
  onClose: () => void;
  mealId: number;
}

const CreateRecipeModal: React.FC<CreateRecipeModalProps> = ({
  isOpen,
  onClose,
  mealId,
}) => {
  const { createRecipe, fetchIngredients, ingredients } = useRecipes();
  const [selectedIngredients, setSelectedIngredients] = useState<RecipeIngredient[]>([]);
  const [rating, setRating] = useState(7);
  const [showIngredientSelector, setShowIngredientSelector] = useState(false);

  useEffect(() => {
    if (isOpen) {
      fetchIngredients();
    }
  }, [isOpen, fetchIngredients]);

  const { values, handleChange, handleSubmit, isSubmitting, resetForm } = useForm<{
    notes: string;
  }>({
    initialValues: {
      notes: '',
    },
    onSubmit: async (formValues) => {
      if (selectedIngredients.length === 0) {
        alert('Please add at least one ingredient');
        return;
      
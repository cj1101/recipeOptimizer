# app/api/endpoints/auth.py
from datetime import timedelta
from typing import Any

from fastapi import APIRouter, Body, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session

from app.api import dependencies
from app.core.config import settings
from app.core.security import create_access_token, get_password_hash, verify_password
from app.schemas.token import Token
from app.schemas.user import User, UserCreate
from app.services import user as user_service

router = APIRouter()

@router.post("/register", response_model=User)
def register(
    user_in: UserCreate,
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Register a new user.
    """
    # Check if user with given email exists
    user = user_service.get_user_by_email(db, email=user_in.email)
    if user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="User with this email already exists"
        )
    
    # Check if username is taken
    user = user_service.get_user_by_username(db, username=user_in.username)
    if user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username is already taken"
        )
    
    # Create new user
    user = user_service.create_user(db, user_in=user_in)
    return user

@router.post("/login", response_model=Token)
def login(
    db: Session = Depends(dependencies.get_db),
    form_data: OAuth2PasswordRequestForm = Depends()
) -> Any:
    """
    Get access token for user.
    """
    # Try to authenticate
    user = user_service.authenticate(
        db, email=form_data.username, password=form_data.password
    )
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # Check if user is active
    if not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Inactive user"
        )
    
    # Create access token
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        subject=str(user.id), expires_delta=access_token_expires
    )
    
    return {"access_token": access_token, "token_type": "bearer"}

@router.post("/password-recovery/{email}", response_model=dict)
def recover_password(email: str, db: Session = Depends(dependencies.get_db)) -> Any:
    """
    Password recovery endpoint.
    """
    user = user_service.get_user_by_email(db, email=email)
    if not user:
        # Don't reveal whether a user exists
        return {"msg": "Password recovery email sent"}
    
    # In a real application, send an email with password reset token
    # For this demo, we'll just return a success message
    return {"msg": "Password recovery email sent"}

@router.post("/reset-password", response_model=dict)
def reset_password(
    token: str = Body(...),
    new_password: str = Body(...),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Reset password endpoint.
    """
    # In a real application, verify token and get user
    # For this demo, we'll just return a success message
    return {"msg": "Password updated successfully"}

# app/api/endpoints/users.py
from typing import Any, List

from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File
from sqlalchemy.orm import Session

from app.api import dependencies
from app.core.security import get_current_user
from app.schemas.user import User, UserUpdate
from app.services import user as user_service
from app.models.user import User as UserModel

router = APIRouter()

@router.get("/me", response_model=User)
def get_current_user_info(
    current_user: UserModel = Depends(get_current_user)
) -> Any:
    """
    Get current user info.
    """
    return current_user

@router.put("/me", response_model=User)
def update_user(
    user_in: UserUpdate,
    current_user: UserModel = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Update current user.
    """
    user = user_service.update_user(db, user=current_user, user_in=user_in)
    return user

@router.post("/profile-image", response_model=dict)
def upload_profile_image(
    file: UploadFile = File(...),
    current_user: UserModel = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Upload profile image.
    """
    # In a real application, save image to storage
    # For this demo, we'll just update the profile_image field with a fake URL
    image_url = f"/images/profile/{current_user.id}_{file.filename}"
    
    user = user_service.update_user_profile_image(db, user=current_user, image_url=image_url)
    
    return {"profile_image": user.profile_image}

# app/api/endpoints/meals.py
from typing import Any, List, Optional

from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session

from app.api import dependencies
from app.core.security import get_current_user
from app.schemas.meal import Meal, MealCreate, MealUpdate
from app.services import meal as meal_service
from app.models.user import User

router = APIRouter()

@router.get("", response_model=List[Meal])
def get_meals(
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    sort: Optional[str] = None,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Get all meals for current user.
    """
    meals = meal_service.get_meals(
        db, 
        user_id=current_user.id, 
        skip=skip, 
        limit=limit,
        search=search,
        sort=sort
    )
    return meals

@router.post("", response_model=Meal)
def create_meal(
    meal_in: MealCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Create a new meal.
    """
    meal = meal_service.create_meal(db, meal_in=meal_in, user_id=current_user.id)
    return meal

@router.get("/{meal_id}", response_model=Meal)
def get_meal(
    meal_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Get a meal by ID.
    """
    meal = meal_service.get_meal(db, meal_id=meal_id)
    if not meal:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Meal not found"
        )
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    return meal

@router.put("/{meal_id}", response_model=Meal)
def update_meal(
    meal_id: int,
    meal_in: MealUpdate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Update a meal.
    """
    meal = meal_service.get_meal(db, meal_id=meal_id)
    if not meal:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Meal not found"
        )
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    meal = meal_service.update_meal(db, meal=meal, meal_in=meal_in)
    return meal

@router.delete("/{meal_id}", response_model=dict)
def delete_meal(
    meal_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Delete a meal.
    """
    meal = meal_service.get_meal(db, meal_id=meal_id)
    if not meal:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Meal not found"
        )
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    meal_service.delete_meal(db, meal_id=meal_id)
    return {"msg": "Meal deleted successfully"}

# app/api/endpoints/recipes.py
from typing import Any, List, Optional

from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session

from app.api import dependencies
from app.core.security import get_current_user
from app.schemas.recipe import Recipe, RecipeCreate, RecipeUpdate
from app.services import recipe as recipe_service
from app.services import meal as meal_service
from app.models.user import User

router = APIRouter()

@router.get("/meal/{meal_id}", response_model=List[Recipe])
def get_recipes_by_meal(
    meal_id: int,
    skip: int = 0,
    limit: int = 100,
    sort: Optional[str] = None,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Get all recipes for a meal.
    """
    # Verify meal belongs to current user
    meal = meal_service.get_meal(db, meal_id=meal_id)
    if not meal:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Meal not found"
        )
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    recipes = recipe_service.get_recipes_by_meal(
        db, 
        meal_id=meal_id, 
        skip=skip, 
        limit=limit,
        sort=sort
    )
    return recipes

@router.post("", response_model=Recipe)
def create_recipe(
    recipe_in: RecipeCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Create a new recipe.
    """
    # Verify meal belongs to current user
    meal = meal_service.get_meal(db, meal_id=recipe_in.meal_id)
    if not meal:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Meal not found"
        )
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    recipe = recipe_service.create_recipe(db, recipe_in=recipe_in, user_id=current_user.id)
    return recipe

@router.get("/{recipe_id}", response_model=Recipe)
def get_recipe(
    recipe_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Get a recipe by ID.
    """
    recipe = recipe_service.get_recipe(db, recipe_id=recipe_id)
    if not recipe:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Recipe not found"
        )
    
    # Verify meal belongs to current user
    meal = meal_service.get_meal(db, meal_id=recipe.meal_id)
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    return recipe

@router.put("/{recipe_id}", response_model=Recipe)
def update_recipe(
    recipe_id: int,
    recipe_in: RecipeUpdate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Update a recipe.
    """
    recipe = recipe_service.get_recipe(db, recipe_id=recipe_id)
    if not recipe:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Recipe not found"
        )
    
    # Verify meal belongs to current user
    meal = meal_service.get_meal(db, meal_id=recipe.meal_id)
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    recipe = recipe_service.update_recipe(db, recipe=recipe, recipe_in=recipe_in)
    return recipe

@router.delete("/{recipe_id}", response_model=dict)
def delete_recipe(
    recipe_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Delete a recipe.
    """
    recipe = recipe_service.get_recipe(db, recipe_id=recipe_id)
    if not recipe:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Recipe not found"
        )
    
    # Verify meal belongs to current user
    meal = meal_service.get_meal(db, meal_id=recipe.meal_id)
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    recipe_service.delete_recipe(db, recipe_id=recipe_id)
    return {"msg": "Recipe deleted successfully"}

@router.post("/{recipe_id}/rate", response_model=Recipe)
def rate_recipe(
    recipe_id: int,
    rating: float = Query(..., ge=1.0, le=10.0),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Rate a recipe.
    """
    recipe = recipe_service.get_recipe(db, recipe_id=recipe_id)
    if not recipe:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Recipe not found"
        )
    
    # Verify meal belongs to current user
    meal = meal_service.get_meal(db, meal_id=recipe.meal_id)
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    recipe = recipe_service.update_recipe_rating(db, recipe_id=recipe_id, rating=rating)
    return recipe

# app/api/endpoints/ingredients.py
from typing import Any, List, Optional

from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session

from app.api import dependencies
from app.core.security import get_current_user
from app.schemas.ingredient import Ingredient, IngredientCreate, IngredientUpdate
from app.services import ingredient as ingredient_service
from app.models.user import User

router = APIRouter()

@router.get("", response_model=List[Ingredient])
def get_ingredients(
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    include_public: bool = True,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Get all ingredients for current user (and public ones).
    """
    ingredients = ingredient_service.get_ingredients(
        db, 
        user_id=current_user.id, 
        skip=skip, 
        limit=limit,
        search=search,
        include_public=include_public
    )
    return ingredients

@router.post("", response_model=Ingredient)
def create_ingredient(
    ingredient_in: IngredientCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Create a new ingredient.
    """
    ingredient = ingredient_service.create_ingredient(
        db, 
        ingredient_in=ingredient_in, 
        user_id=current_user.id
    )
    return ingredient

@router.get("/{ingredient_id}", response_model=Ingredient)
def get_ingredient(
    ingredient_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Get an ingredient by ID.
    """
    ingredient = ingredient_service.get_ingredient(db, ingredient_id=ingredient_id)
    if not ingredient:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Ingredient not found"
        )
    
    # Check access permissions
    if ingredient.user_id != current_user.id and not ingredient.is_public:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    return ingredient

@router.put("/{ingredient_id}", response_model=Ingredient)
def update_ingredient(
    ingredient_id: int,
    ingredient_in: IngredientUpdate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Update an ingredient.
    """
    ingredient = ingredient_service.get_ingredient(db, ingredient_id=ingredient_id)
    if not ingredient:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Ingredient not found"
        )
    
    if ingredient.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    ingredient = ingredient_service.update_ingredient(
        db, 
        ingredient=ingredient, 
        ingredient_in=ingredient_in
    )
    return ingredient

@router.delete("/{ingredient_id}", response_model=dict)
def delete_ingredient(
    ingredient_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Delete an ingredient.
    """
    ingredient = ingredient_service.get_ingredient(db, ingredient_id=ingredient_id)
    if not ingredient:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Ingredient not found"
        )
    
    if ingredient.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    ingredient_service.delete_ingredient(db, ingredient_id=ingredient_id)
    return {"msg": "Ingredient deleted successfully"}

# app/api/endpoints/social.py
from typing import Any
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
import uuid

from app.api import dependencies
from app.core.security import get_current_user
from app.schemas.social import SocialShare, SocialShareCreate
from app.services import social as social_service
from app.services import recipe as recipe_service
from app.services import meal as meal_service
from app.models.user import User

router = APIRouter()

@router.post("/share/{recipe_id}", response_model=SocialShare)
def create_share_link(
    recipe_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Create a share link for a recipe.
    """
    # Verify recipe exists and user has access to it
    recipe = recipe_service.get_recipe(db, recipe_id=recipe_id)
    if not recipe:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Recipe not found"
        )
    
    # Verify meal belongs to current user
    meal = meal_service.get_meal(db, meal_id=recipe.meal_id)
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    # Create share
    share_token = str(uuid.uuid4())
    share_in = SocialShareCreate(recipe_id=recipe_id)
    share = social_service.create_social_share(db, share_in=share_in, token=share_token)
    
    return share

@router.get("/shared/{token}", response_model=dict)
def get_shared_recipe(
    token: str,
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Get a shared recipe using a share token.
    """
    share = social_service.get_social_share_by_token(db, token=token)
    if not share:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Shared recipe not found or link has expired"
        )
    
    recipe = recipe_service.get_recipe(db, recipe_id=share.recipe_id)
    if not recipe:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Recipe not found"
        )
    
    # Get meal name
    meal = meal_service.get_meal(db, meal_id=recipe.meal_id)
    meal_name = meal.name if meal else "Unknown"
    
    return {
        "recipe": recipe,
        "meal_name": meal_name,
        "shared_by": meal.user.username if meal and meal.user else "Unknown"
    }

@router.delete("/share/{share_id}", response_model=dict)
def delete_share_link(
    share_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(dependencies.get_db)
) -> Any:
    """
    Delete a share link.
    """
    share = social_service.get_social_share(db, share_id=share_id)
    if not share:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Share not found"
        )
    
    # Verify recipe and meal belong to current user
    recipe = recipe_service.get_recipe(db, recipe_id=share.recipe_id)
    if not recipe:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Recipe not found"
        )
    
    meal = meal_service.get_meal(db, meal_id=recipe.meal_id)
    if meal.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    social_service.delete_social_share(db, share_id=share_id)
    return {"msg": "Share link deleted successfully"}